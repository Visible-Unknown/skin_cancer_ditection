from flask import Flask, render_template, request, redirect, url_for, session, send_file
from werkzeug.utils import secure_filename
from werkzeug.security import generate_password_hash, check_password_hash
import os
import mysql.connector
from datetime import datetime
from fpdf import FPDF
from tensorflow.keras.models import load_model
from tensorflow.keras.preprocessing import image
import numpy as np

app = Flask(__name__)
app.secret_key = 'your_secret_key_here'
app.config['UPLOAD_FOLDER'] = 'static/uploads'
app.config['ALLOWED_EXTENSIONS'] = {'png', 'jpg', 'jpeg'}

# MySQL Configuration
db_config = {
    'host': 'localhost',
    'user': 'root',
    'password': '',
    'database': 'skin_cancer_db'
}

# Load ML model
model = load_model('models/skin_cancer_detection.h5')
class_names = ['benign', 'malignant']

# Helper Functions
def get_db_connection():
    return mysql.connector.connect(**db_config)

def allowed_file(filename):
    return '.' in filename and \
           filename.rsplit('.', 1)[1].lower() in app.config['ALLOWED_EXTENSIONS']

def generate_pdf(user_data, prediction_data):
    pdf = FPDF()
    pdf.add_page()
    pdf.set_font("Arial", size=12)
    
    # Add logo/title
    pdf.cell(200, 10, txt="Skin Cancer Detection Report", ln=1, align='C')
    pdf.ln(10)
    
    # User Information
    pdf.cell(200, 10, txt="Patient Information:", ln=1)
    pdf.cell(200, 10, txt=f"Name: {user_data['full_name']}", ln=1)
    pdf.cell(200, 10, txt=f"Age: {user_data['age']}", ln=1)
    pdf.cell(200, 10, txt=f"Gender: {user_data['gender']}", ln=1)
    pdf.ln(10)
    
    # Prediction Results
    pdf.cell(200, 10, txt="Diagnosis Results:", ln=1)
    pdf.cell(200, 10, txt=f"Prediction: {prediction_data['result']}", ln=1)
    pdf.cell(200, 10, txt=f"Confidence: {prediction_data['confidence']:.2f}%", ln=1)
    pdf.cell(200, 10, txt=f"Date: {prediction_data['date']}", ln=1)
    pdf.ln(10)
    
    # Medical Disclaimer
    pdf.set_font("Arial", size=10)
    pdf.multi_cell(0, 10, txt="Disclaimer: This report is generated by an AI system and should not be considered as a final diagnosis. Please consult with a medical professional for proper evaluation.")
    
    # Save PDF
    pdf_path = f"static/reports/report_{datetime.now().strftime('%Y%m%d%H%M%S')}.pdf"
    os.makedirs(os.path.dirname(pdf_path), exist_ok=True)
    pdf.output(pdf_path)
    return pdf_path


# Routes
@app.route('/')
def home():
    if 'user_id' in session:
        return redirect(url_for('dashboard'))
    return render_template('index.html')

@app.route('/register', methods=['GET', 'POST'])
def register():
    if request.method == 'POST':
        username = request.form['username']
        email = request.form['email']
        password = generate_password_hash(request.form['password'])
        full_name = request.form['full_name']
        age = request.form['age']
        gender = request.form['gender']
        
        try:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.execute(
                "INSERT INTO users (username, email, password, full_name, age, gender) VALUES (%s, %s, %s, %s, %s, %s)",
                (username, email, password, full_name, age, gender)
            )
            conn.commit()
            return redirect(url_for('login'))
        except mysql.connector.Error as err:
            return f"Error: {err}"
        finally:
            if conn.is_connected():
                cursor.close()
                conn.close()
    return render_template('register.html')


@app.route('/login', methods=['GET', 'POST'])
def login():
    if request.method == 'POST':
        username = request.form['username']
        password = request.form['password']
        
        conn = get_db_connection()
        cursor = conn.cursor(dictionary=True)
        cursor.execute("SELECT * FROM users WHERE username = %s", (username,))
        user = cursor.fetchone()
        conn.close()
        
        if user and check_password_hash(user['password'], password):
            session['user_id'] = user['id']
            session['username'] = user['username']
            return redirect(url_for('dashboard'))
        else:
            return "Invalid credentials"
    return render_template('login.html')

@app.route('/dashboard')
def dashboard():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    
    # Get user info
    cursor.execute("SELECT * FROM users WHERE id = %s", (session['user_id'],))
    user = cursor.fetchone()
    
    # Get prediction history
    cursor.execute("SELECT * FROM predictions WHERE user_id = %s ORDER BY created_at DESC", (session['user_id'],))
    history = cursor.fetchall()
    
    conn.close()
    return render_template('dashboard.html', user=user, history=history)

@app.route('/predict', methods=['POST'])
def predict():
    if 'user_id' not in session:
        return redirect(url_for('login'))
    
    if 'file' not in request.files:
        return redirect(request.url)
    
    file = request.files['file']
    if file.filename == '':
        return redirect(request.url)
    
    if file and allowed_file(file.filename):
        filename = secure_filename(file.filename)
        filepath = os.path.join(app.config['UPLOAD_FOLDER'], filename)
        file.save(filepath)
        
        # Make prediction
        img = image.load_img(filepath, target_size=(224, 224))
        img_array = image.img_to_array(img) / 255.0
        img_array = np.expand_dims(img_array, axis=0)
        
        prediction = model.predict(img_array)
        class_idx = np.argmax(prediction[0])
        confidence = float(prediction[0][class_idx])
        result = class_names[class_idx]
        
        # Save prediction to database
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.execute(
            "INSERT INTO predictions (user_id, image_path, prediction_result, confidence) VALUES (%s, %s, %s, %s)",
            (session['user_id'], filepath, result, confidence)
        )
        conn.commit()
        prediction_id = cursor.lastrowid
        conn.close()
        
        return redirect(url_for('result', prediction_id=prediction_id))
    
    return redirect(url_for('dashboard'))

@app.route('/result/<int:prediction_id>')
def result(prediction_id):
    if 'user_id' not in session:
        return redirect(url_for('login'))
    
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    
    cursor.execute("""
        SELECT p.*, u.full_name, u.age, u.gender 
        FROM predictions p
        JOIN users u ON p.user_id = u.id
        WHERE p.id = %s AND p.user_id = %s
    """, (prediction_id, session['user_id']))

    
    prediction = cursor.fetchone()
    conn.close()
    
    if not prediction:
        return redirect(url_for('dashboard'))
    
    return render_template('result.html', prediction=prediction)

@app.route('/download-report/<int:prediction_id>')
def download_report(prediction_id):
    if 'user_id' not in session:
        return redirect(url_for('login'))
    
    conn = get_db_connection()
    cursor = conn.cursor(dictionary=True)
    
    cursor.execute("""
        SELECT p.*, u.full_name, u.age, u.gender 
        FROM predictions p
        JOIN users u ON p.user_id = u.id
        WHERE p.id = %s AND p.user_id = %s
    """, (prediction_id, session['user_id']))
    
    data = cursor.fetchone()
    conn.close()
    
    if not data:
        return redirect(url_for('dashboard'))
    
    user_data = {
        'full_name': data['full_name'],
        'age': data['age'],
        'gender': data['gender']
    }
    
    prediction_data = {
        'result': data['prediction_result'],
        'confidence': data['confidence'] * 100,
        'date': data['created_at'].strftime('%Y-%m-%d %H:%M:%S')
    }
    
    pdf_path = generate_pdf(user_data, prediction_data)
    return send_file(pdf_path, as_attachment=True)

@app.route('/logout')
def logout():
    session.clear()
    return redirect(url_for('home'))

@app.route('/save-notes/<int:prediction_id>', methods=['POST'])
def save_notes(prediction_id):
    if 'user_id' not in session:
        return redirect(url_for('login'))
    
    notes = request.form.get('notes')
    
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE predictions SET notes = %s WHERE id = %s AND user_id = %s",
        (notes, prediction_id, session['user_id'])
    )
    conn.commit()
    conn.close()
    
    return redirect(url_for('result', prediction_id=prediction_id))

if __name__ == '__main__':
    os.makedirs(app.config['UPLOAD_FOLDER'], exist_ok=True)
    app.run(debug=True)